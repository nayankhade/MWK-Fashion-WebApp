package com.mwkfashion.mwk_fashion_backend.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mwkfashion.mwk_fashion_backend.enums.Role;
import com.mwkfashion.mwk_fashion_backend.model.Users;
import com.mwkfashion.mwk_fashion_backend.repository.UsersRepository;
import com.mwkfashion.mwk_fashion_backend.model.AdminHandler;

@Service
public class UsersServicesImpl implements UsersServices {

    @Autowired
    private UsersRepository usersRepository;

    @Autowired
    private AdminHandlerServiceImpl adminHandlerService;

    @Override
    public Users signUp(Users user) {
        log.info("Attempting to sign up user with email: {}", user.getEmail());
        Users existingUser = usersRepository.findByEmail(user.getEmail());
        if (existingUser != null) {
            log.error("Email is already in use: {}", user.getEmail());
            throw new IllegalArgumentException("Email is already in use");
        }

        Role role = user.getRole();
        String uniqueCode = user.getUniqueCode();
        log.info("User role: {}", role);

        if (role == Role.ADMIN) {
            AdminHandler adminHandler = adminHandlerService.getUniqueCodeByRole(Role.ADMIN);
            if (adminHandler == null || !adminHandler.getUniqueCode().equals(uniqueCode)) {
                log.error("Invalid unique code for Admin role");
                throw new IllegalArgumentException("Invalid unique code for Admin role");
            }
        } else if (role == Role.MANAGER) {
            AdminHandler adminHandler = adminHandlerService.getUniqueCodeByRole(Role.MANAGER);
            if (adminHandler == null || !adminHandler.getUniqueCode().equals(uniqueCode)) {
                log.error("Invalid unique code for Manager role");
                throw new IllegalArgumentException("Invalid unique code for Manager role");
            }
        } else if (role == Role.USER) {
            if (uniqueCode != null && !uniqueCode.isEmpty()) {
                log.error("Unique code should not be provided for User role");
                throw new IllegalArgumentException("Unique code should not be provided for User role");
            }
        }

        LOG.info("User signup successful for email: {}", user.getEmail());
        return usersRepository.save(user);
    }


    @Override
    public Users login(String email, String password) {
        Users user = usersRepository.findByEmail(email);
        if (user != null && user.getPassword().equals(password)) {
            return user;
        }
        return null;
    }}
